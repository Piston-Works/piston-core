<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/example/EventRegistrationExample.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/example/EventRegistrationExample.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/example/ExampleEventListener.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/example/ExampleEventListener.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/impl/piston-core-spigot/src/main/java/org/pistonworks/core/spigot/PistonCoreSpigotPlugin.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/impl/piston-core-spigot/src/main/java/org/pistonworks/core/spigot/PistonCoreSpigotPlugin.java" />
              <option name="originalContent" value="package org.pistonworks.core.spigot;&#10;&#10;import org.bukkit.plugin.java.JavaPlugin;&#10;import org.pistonworks.core.api.PistonCore;&#10;import org.pistonworks.core.api.logging.Logger;&#10;import org.pistonworks.core.api.plugin.PistonPlugin;&#10;import org.pistonworks.core.api.service.CommandService;&#10;import org.pistonworks.core.api.service.EventService;&#10;import org.yaml.snakeyaml.Yaml;&#10;&#10;import java.io.InputStream;&#10;import java.util.Map;&#10;&#10;/**&#10; * Main plugin class for PistonCore Spigot implementation.&#10; * This class extends JavaPlugin and serves as the entry point for the plugin.&#10; */&#10;public final class PistonCoreSpigotPlugin extends JavaPlugin&#10;{&#10;&#10;    // A static reference to the main plugin instance. This is a common pattern for easy access.&#10;    private static PistonCoreSpigotPlugin instance;&#10;    private PistonCoreSpigotServices services;&#10;    private SpigotPlugin spigotPlugin;&#10;    private PistonPlugin userPlugin;&#10;    private Logger logger;&#10;&#10;    /**&#10;     * Gets the singleton instance of the PistonCoreSpigotPlugin.&#10;     *&#10;     * @return The plugin instance&#10;     */&#10;    public static PistonCoreSpigotPlugin getInstance()&#10;    {&#10;        return instance;&#10;    }&#10;&#10;    @Override&#10;    public void onEnable()&#10;    {&#10;        instance = this;&#10;&#10;        // Initialize Piston Core services after plugin is enabled&#10;        services = new PistonCoreSpigotServices(this);&#10;        PistonCore.setServices(services);&#10;&#10;        // Get Piston Core logger&#10;        logger = PistonCore.getLoggingService().getLogger(PistonCoreSpigotPlugin.class);&#10;&#10;        // Create SpigotPlugin wrapper&#10;        spigotPlugin = new SpigotPlugin(this);&#10;&#10;        // Load and initialize user plugin&#10;        try&#10;        {&#10;            loadUserPlugin();&#10;        } catch (Exception e)&#10;        {&#10;            logger.error(&quot;Failed to load user plugin: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            getServer().getPluginManager().disablePlugin(this);&#10;            return;&#10;        }&#10;&#10;        logger.info(&quot;Piston Core Spigot implementation enabled!&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void onDisable()&#10;    {&#10;        // Disable user plugin first&#10;        if (userPlugin != null)&#10;        {&#10;            try&#10;            {&#10;                userPlugin.onDisable();&#10;            } catch (Exception e)&#10;            {&#10;                if (logger != null)&#10;                {&#10;                    logger.warn(&quot;Error disabling user plugin: &quot; + e.getMessage());&#10;                } else&#10;                {&#10;                    getLogger().warning(&quot;Error disabling user plugin: &quot; + e.getMessage());&#10;                }&#10;            }&#10;        }&#10;&#10;        instance = null;&#10;        if (logger != null)&#10;        {&#10;            logger.info(&quot;Piston Core Spigot implementation disabled!&quot;);&#10;        } else&#10;        {&#10;            getLogger().info(&quot;Piston Core Spigot implementation disabled!&quot;);&#10;        }&#10;    }&#10;&#10;    private void loadUserPlugin() throws Exception&#10;    {&#10;        logger.info(&quot;Loading user plugin...&quot;);&#10;&#10;        // Prevent loading the user plugin multiple times&#10;        if (userPlugin != null)&#10;        {&#10;            logger.warn(&quot;User plugin already loaded, skipping duplicate load&quot;);&#10;            return;&#10;        }&#10;&#10;        // Read piston-core.yml to get the main class&#10;        InputStream pistonYmlStream = getResource(&quot;piston-core.yml&quot;);&#10;        if (pistonYmlStream == null)&#10;        {&#10;            throw new IllegalStateException(&quot;piston-core.yml not found in plugin resources&quot;);&#10;        }&#10;&#10;        Yaml yaml = new Yaml();&#10;        Map&lt;String, Object&gt; config = yaml.load(pistonYmlStream);&#10;&#10;        String mainClassName = (String) config.get(&quot;main&quot;);&#10;        if (mainClassName == null)&#10;        {&#10;            throw new IllegalStateException(&quot;main class not specified in piston-core.yml&quot;);&#10;        }&#10;&#10;        // Load and instantiate the user's plugin class&#10;        Class&lt;?&gt; mainClass = Class.forName(mainClassName);&#10;        if (!PistonPlugin.class.isAssignableFrom(mainClass))&#10;        {&#10;            throw new IllegalStateException(&quot;Main class &quot; + mainClassName + &quot; must implement PistonPlugin&quot;);&#10;        }&#10;&#10;        userPlugin = (PistonPlugin) mainClass.getDeclaredConstructor().newInstance();&#10;&#10;        // Initialize the user plugin&#10;        userPlugin.onEnable();&#10;&#10;        logger.info(&quot;Loaded user plugin: &quot; + mainClassName);&#10;    }&#10;&#10;    public EventService getEventService()&#10;    {&#10;        return services.getEventService();&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.pistonworks.core.spigot;&#10;&#10;import org.bukkit.plugin.java.JavaPlugin;&#10;import org.pistonworks.core.api.PistonCore;&#10;import org.pistonworks.core.api.logging.Logger;&#10;import org.pistonworks.core.api.plugin.PistonPlugin;&#10;import org.pistonworks.core.api.service.CommandService;&#10;import org.pistonworks.core.api.service.EventService;&#10;import org.yaml.snakeyaml.Yaml;&#10;&#10;import java.io.InputStream;&#10;import java.util.Map;&#10;&#10;/**&#10; * Main plugin class for PistonCore Spigot implementation.&#10; * This class extends JavaPlugin and serves as the entry point for the plugin.&#10; */&#10;public final class PistonCoreSpigotPlugin extends JavaPlugin&#10;{&#10;&#10;    // A static reference to the main plugin instance. This is a common pattern for easy access.&#10;    private static PistonCoreSpigotPlugin instance;&#10;    private PistonCoreSpigotServices services;&#10;    private SpigotPlugin spigotPlugin;&#10;    private PistonPlugin userPlugin;&#10;    private Logger logger;&#10;&#10;    /**&#10;     * Gets the singleton instance of the PistonCoreSpigotPlugin.&#10;     *&#10;     * @return The plugin instance&#10;     */&#10;    public static PistonCoreSpigotPlugin getInstance()&#10;    {&#10;        return instance;&#10;    }&#10;&#10;    @Override&#10;    public void onEnable()&#10;    {&#10;        instance = this;&#10;&#10;        // Initialize Piston Core services after plugin is enabled&#10;        services = new PistonCoreSpigotServices(this);&#10;        PistonCore.setServices(services);&#10;&#10;        // Get Piston Core logger&#10;        logger = PistonCore.getLoggingService().getLogger(PistonCoreSpigotPlugin.class);&#10;&#10;        // Create SpigotPlugin wrapper&#10;        spigotPlugin = new SpigotPlugin(this);&#10;&#10;        // Load and initialize user plugin&#10;        try&#10;        {&#10;            loadUserPlugin();&#10;        } catch (Exception e)&#10;        {&#10;            logger.error(&quot;Failed to load user plugin: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            getServer().getPluginManager().disablePlugin(this);&#10;            return;&#10;        }&#10;&#10;        logger.info(&quot;Piston Core Spigot implementation enabled!&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void onDisable()&#10;    {&#10;        // Disable user plugin first&#10;        if (userPlugin != null)&#10;        {&#10;            try&#10;            {&#10;                userPlugin.onDisable();&#10;            } catch (Exception e)&#10;            {&#10;                if (logger != null)&#10;                {&#10;                    logger.warn(&quot;Error disabling user plugin: &quot; + e.getMessage());&#10;                } else&#10;                {&#10;                    getLogger().warning(&quot;Error disabling user plugin: &quot; + e.getMessage());&#10;                }&#10;            }&#10;        }&#10;&#10;        instance = null;&#10;        if (logger != null)&#10;        {&#10;            logger.info(&quot;Piston Core Spigot implementation disabled!&quot;);&#10;        } else&#10;        {&#10;            getLogger().info(&quot;Piston Core Spigot implementation disabled!&quot;);&#10;        }&#10;    }&#10;&#10;    private void loadUserPlugin() throws Exception&#10;    {&#10;        logger.info(&quot;Loading user plugin...&quot;);&#10;&#10;        // Prevent loading the user plugin multiple times&#10;        if (userPlugin != null)&#10;        {&#10;            logger.warn(&quot;User plugin already loaded, skipping duplicate load&quot;);&#10;            return;&#10;        }&#10;&#10;        // Read piston-core.yml to get the main class&#10;        InputStream pistonYmlStream = getResource(&quot;piston-core.yml&quot;);&#10;        if (pistonYmlStream == null)&#10;        {&#10;            throw new IllegalStateException(&quot;piston-core.yml not found in plugin resources&quot;);&#10;        }&#10;&#10;        Yaml yaml = new Yaml();&#10;        Map&lt;String, Object&gt; config = yaml.load(pistonYmlStream);&#10;&#10;        String mainClassName = (String) config.get(&quot;main&quot;);&#10;        if (mainClassName == null)&#10;        {&#10;            throw new IllegalStateException(&quot;main class not specified in piston-core.yml&quot;);&#10;        }&#10;&#10;        // Load and instantiate the user's plugin class&#10;        Class&lt;?&gt; mainClass = Class.forName(mainClassName);&#10;        if (!PistonPlugin.class.isAssignableFrom(mainClass))&#10;        {&#10;            throw new IllegalStateException(&quot;Main class &quot; + mainClassName + &quot; must implement PistonPlugin&quot;);&#10;        }&#10;&#10;        userPlugin = (PistonPlugin) mainClass.getDeclaredConstructor().newInstance();&#10;&#10;        // Initialize the user plugin&#10;        userPlugin.onEnable();&#10;&#10;        logger.info(&quot;Loaded user plugin: &quot; + mainClassName);&#10;    }&#10;&#10;    /**&#10;     * Gets the command service instance.&#10;     * &#10;     * @return The CommandService implementation&#10;     */&#10;    public CommandService getCommandService()&#10;    {&#10;        return services.getCommandService();&#10;    }&#10;&#10;    /**&#10;     * Gets the event service instance.&#10;     * &#10;     * @return The EventService implementation&#10;     */&#10;    public EventService getEventService()&#10;    {&#10;        return services.getEventService();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/impl/piston-core-spigot/src/main/java/org/pistonworks/core/spigot/PistonCoreSpigotServices.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/impl/piston-core-spigot/src/main/java/org/pistonworks/core/spigot/PistonCoreSpigotServices.java" />
              <option name="originalContent" value="package org.pistonworks.core.spigot;&#10;&#10;import org.bukkit.plugin.java.JavaPlugin;&#10;import org.pistonworks.core.api.PistonCoreServices;&#10;import org.pistonworks.core.api.service.*;&#10;import org.pistonworks.core.common.PluginDiscoveryServiceImpl;&#10;&#10;/**&#10; * Spigot implementation of PistonCoreServices.&#10; * Provides all core services for the Spigot platform implementation.&#10; */&#10;public final class PistonCoreSpigotServices implements PistonCoreServices&#10;{&#10;&#10;    private final JavaPlugin plugin;&#10;    private final SpigotPlugin spigotPlugin;&#10;    private final CommandService commandService;&#10;    private final EventService eventService;&#10;    private final LifecycleService lifecycleService;&#10;    private final PluginDiscoveryService pluginDiscoveryService;&#10;    private final LoggingService loggingService;&#10;    private final PluginMetadataService pluginMetadataService;&#10;&#10;    /**&#10;     * Creates a new PistonCoreSpigotServices instance.&#10;     *&#10;     * @param plugin The JavaPlugin instance&#10;     */&#10;    public PistonCoreSpigotServices(JavaPlugin plugin)&#10;    {&#10;        this.plugin = plugin;&#10;        this.spigotPlugin = new SpigotPlugin(plugin);&#10;        this.commandService = new SpigotCommandServiceImpl(plugin);&#10;        this.eventService = new SpigotEventServiceImpl(spigotPlugin);&#10;        this.lifecycleService = new SpigotLifecycleServiceImpl(plugin);&#10;        this.loggingService = new SpigotLoggingService(plugin);&#10;        this.pluginMetadataService = new SpigotPluginMetadataService(plugin);&#10;&#10;        // Initialize plugin discovery service - no longer needs directory parameters&#10;        // since it just manages plugin instances, not file loading&#10;        this.pluginDiscoveryService = new PluginDiscoveryServiceImpl();&#10;    }&#10;&#10;    // Additional constructor for reflection-based initialization from API&#10;&#10;    @Override&#10;    public CommandService getCommandService()&#10;    {&#10;        return this.commandService;&#10;    }&#10;&#10;    @Override&#10;    public EventService getEventService()&#10;    {&#10;        return this.eventService;&#10;    }&#10;&#10;    @Override&#10;    public LifecycleService getLifecycleService()&#10;    {&#10;        return this.lifecycleService;&#10;    }&#10;&#10;    @Override&#10;    public PluginDiscoveryService getPluginDiscoveryService()&#10;    {&#10;        return this.pluginDiscoveryService;&#10;    }&#10;&#10;    @Override&#10;    public LoggingService getLoggingService()&#10;    {&#10;        return this.loggingService;&#10;    }&#10;&#10;    @Override&#10;    public PluginMetadataService getPluginMetadataService()&#10;    {&#10;        return this.pluginMetadataService;&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.pistonworks.core.spigot;&#10;&#10;import org.bukkit.plugin.java.JavaPlugin;&#10;import org.pistonworks.core.api.PistonCoreServices;&#10;import org.pistonworks.core.api.service.*;&#10;import org.pistonworks.core.common.PluginDiscoveryServiceImpl;&#10;&#10;/**&#10; * Spigot implementation of PistonCoreServices.&#10; * Provides all core services for the Spigot platform implementation.&#10; */&#10;public final class PistonCoreSpigotServices implements PistonCoreServices&#10;{&#10;&#10;    private final JavaPlugin plugin;&#10;    private final SpigotPlugin spigotPlugin;&#10;    private final CommandService commandService;&#10;    private final EventService eventService;&#10;    private final LifecycleService lifecycleService;&#10;    private final PluginDiscoveryService pluginDiscoveryService;&#10;    private final LoggingService loggingService;&#10;    private final PluginMetadataService pluginMetadataService;&#10;&#10;    /**&#10;     * Creates a new PistonCoreSpigotServices instance.&#10;     *&#10;     * @param plugin The JavaPlugin instance&#10;     */&#10;    public PistonCoreSpigotServices(JavaPlugin plugin)&#10;    {&#10;        this.plugin = plugin;&#10;        this.spigotPlugin = new SpigotPlugin(plugin);&#10;        this.commandService = new SpigotCommandServiceImpl(plugin);&#10;        this.eventService = new SpigotEventServiceImpl(spigotPlugin);&#10;        this.lifecycleService = new SpigotLifecycleServiceImpl(plugin);&#10;        this.loggingService = new SpigotLoggingService(plugin);&#10;        this.pluginMetadataService = new SpigotPluginMetadataService(plugin);&#10;&#10;        // Initialize plugin discovery service - no longer needs directory parameters&#10;        // since it just manages plugin instances, not file loading&#10;        this.pluginDiscoveryService = new PluginDiscoveryServiceImpl();&#10;    }&#10;&#10;    /**&#10;     * Additional constructor for reflection-based initialization from API.&#10;     * &#10;     * @param plugin The plugin instance (must be a JavaPlugin)&#10;     */&#10;    public PistonCoreSpigotServices(Object plugin)&#10;    {&#10;        this((JavaPlugin) plugin);&#10;    }&#10;&#10;    @Override&#10;    public CommandService getCommandService()&#10;    {&#10;        return this.commandService;&#10;    }&#10;&#10;    @Override&#10;    public EventService getEventService()&#10;    {&#10;        return this.eventService;&#10;    }&#10;&#10;    @Override&#10;    public LifecycleService getLifecycleService()&#10;    {&#10;        return this.lifecycleService;&#10;    }&#10;&#10;    @Override&#10;    public PluginDiscoveryService getPluginDiscoveryService()&#10;    {&#10;        return this.pluginDiscoveryService;&#10;    }&#10;&#10;    @Override&#10;    public LoggingService getLoggingService()&#10;    {&#10;        return this.loggingService;&#10;    }&#10;&#10;    @Override&#10;    public PluginMetadataService getPluginMetadataService()&#10;    {&#10;        return this.pluginMetadataService;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/impl/piston-core-spigot/src/main/java/org/pistonworks/core/spigot/SpigotLifecycleServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/impl/piston-core-spigot/src/main/java/org/pistonworks/core/spigot/SpigotLifecycleServiceImpl.java" />
              <option name="originalContent" value="package org.pistonworks.core.spigot;&#10;&#10;import org.bukkit.plugin.java.JavaPlugin;&#10;import org.pistonworks.core.api.plugin.PistonPlugin;&#10;import org.pistonworks.core.api.service.LifecycleService;&#10;&#10;/**&#10; * Spigot implementation of the LifecycleService.&#10; * Manages plugin lifecycle events for the Spigot platform.&#10; */&#10;public class SpigotLifecycleServiceImpl implements LifecycleService&#10;{&#10;&#10;    private final JavaPlugin plugin;&#10;&#10;    @Override&#10;    public void onEnable(PistonPlugin plugin)&#10;    {&#10;        this.plugin.getLogger().info(&quot;Plugin enabled: &quot; + plugin.getClass().getSimpleName());&#10;        // Additional enable logic can be added here&#10;    }&#10;&#10;    @Override&#10;    public void onDisable(PistonPlugin plugin)&#10;    {&#10;        this.plugin.getLogger().info(&quot;Plugin disabled: &quot; + plugin.getClass().getSimpleName());&#10;        // Additional disable logic can be added here&#10;    }&#10;&#10;    /**&#10;     * Called when the Piston Core system is loaded.&#10;     */&#10;    public void onLoad()&#10;    {&#10;        plugin.getLogger().info(&quot;Piston Core system loaded on Spigot&quot;);&#10;    }&#10;&#10;    /**&#10;     * Called when the Piston Core system is unloaded.&#10;     */&#10;    public void onUnload()&#10;    {&#10;        plugin.getLogger().info(&quot;Piston Core system unloaded from Spigot&quot;);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.pistonworks.core.spigot;&#13;&#10;&#13;&#10;import org.bukkit.plugin.java.JavaPlugin;&#13;&#10;import org.pistonworks.core.api.plugin.PistonPlugin;&#13;&#10;import org.pistonworks.core.api.service.LifecycleService;&#13;&#10;&#13;&#10;/**&#13;&#10; * Spigot implementation of the LifecycleService.&#13;&#10; * Manages plugin lifecycle events for the Spigot platform.&#13;&#10; */&#13;&#10;public class SpigotLifecycleServiceImpl implements LifecycleService&#13;&#10;{&#13;&#10;&#13;&#10;    private final JavaPlugin plugin;&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Creates a new SpigotLifecycleServiceImpl instance.&#13;&#10;     * &#13;&#10;     * @param plugin The JavaPlugin instance&#13;&#10;     */&#13;&#10;    public SpigotLifecycleServiceImpl(JavaPlugin plugin)&#13;&#10;    {&#13;&#10;        this.plugin = plugin;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void onEnable(PistonPlugin plugin)&#13;&#10;    {&#13;&#10;        this.plugin.getLogger().info(&quot;Plugin enabled: &quot; + plugin.getClass().getSimpleName());&#13;&#10;        // Additional enable logic can be added here&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void onDisable(PistonPlugin plugin)&#13;&#10;    {&#13;&#10;        this.plugin.getLogger().info(&quot;Plugin disabled: &quot; + plugin.getClass().getSimpleName());&#13;&#10;        // Additional disable logic can be added here&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Called when the Piston Core system is loaded.&#13;&#10;     */&#13;&#10;    public void onLoad()&#13;&#10;    {&#13;&#10;        plugin.getLogger().info(&quot;Piston Core system loaded on Spigot&quot;);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Called when the Piston Core system is unloaded.&#13;&#10;     */&#13;&#10;    public void onUnload()&#13;&#10;    {&#13;&#10;        plugin.getLogger().info(&quot;Piston Core system unloaded from Spigot&quot;);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/impl/piston-core-spigot/src/main/java/org/pistonworks/core/spigot/SpigotLoggingService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/impl/piston-core-spigot/src/main/java/org/pistonworks/core/spigot/SpigotLoggingService.java" />
              <option name="originalContent" value="package org.pistonworks.core.spigot;&#10;&#10;    private final Map&lt;Class&lt;?&gt;, Logger&gt; loggers = new HashMap&lt;&gt;();&#10;    private final org.bukkit.plugin.Plugin plugin;&#10;&#10;    /**&#10;     * Creates a new SpigotLoggingService instance.&#10;     *&#10;     * @param plugin The Bukkit plugin instance&#10;     */&#10;    public SpigotLoggingService(org.bukkit.plugin.Plugin plugin)&#10;    {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public Logger getLogger(Class&lt;?&gt; clazz)&#10;    {&#10;        return loggers.computeIfAbsent(clazz, c -&gt;&#10;        {&#10;            // Determine if this is a Piston Core class or user plugin class&#10;            boolean isPistonCore = c.getPackage() != null &amp;&amp; c.getPackage().getName().startsWith(&quot;org.pistonworks.core&quot;);&#10;&#10;            if (isPistonCore)&#10;            {&#10;                // For Piston Core classes, create a custom logger with &quot;Piston Core&quot; name&#10;                java.util.logging.Logger coreLogger = java.util.logging.Logger.getLogger(&quot;Piston Core&quot;);&#10;                return new SpigotLogger(coreLogger, true);&#10;            } else&#10;            {&#10;                // For user plugin classes, use the plugin's logger directly&#10;                return new SpigotLogger(plugin.getLogger(), false);&#10;            }&#10;        });&#10;    }&#10;&#10;    private static class SpigotLogger implements Logger&#10;    {&#10;        private final java.util.logging.Logger logger;&#10;        private final boolean isPistonCore;&#10;&#10;        public SpigotLogger(java.util.logging.Logger logger, boolean isPistonCore)&#10;        {&#10;            this.logger = logger;&#10;            this.isPistonCore = isPistonCore;&#10;        }&#10;&#10;        private void log(Level level, String message)&#10;        {&#10;            if (isPistonCore)&#10;            {&#10;                // For Piston Core, we need to log to the server console directly to avoid double prefixes&#10;                // Use the server's main logger instead of a custom one&#10;                java.util.logging.Logger serverLogger = java.util.logging.Logger.getLogger(&quot;Minecraft&quot;);&#10;                serverLogger.log(level, &quot;[Piston Core] &quot; + message);&#10;            } else&#10;            {&#10;                // For user plugins, let Bukkit handle the prefixing&#10;                logger.log(level, message);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public void debug(String message)&#10;        {&#10;            log(Level.FINE, message);&#10;        }&#10;&#10;        @Override&#10;        public void info(String message)&#10;        {&#10;            log(Level.INFO, message);&#10;        }&#10;&#10;        @Override&#10;        public void warn(String message)&#10;        {&#10;            log(Level.WARNING, message);&#10;        }&#10;&#10;        @Override&#10;        public void error(String message)&#10;        {&#10;            log(Level.SEVERE, message);&#10;        }&#10;&#10;        @Override&#10;        public void critical(String message)&#10;        {&#10;            log(Level.SEVERE, message);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.pistonworks.core.spigot;&#10;&#10;import org.pistonworks.core.api.logging.Logger;&#10;import org.pistonworks.core.api.service.LoggingService;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;import java.util.logging.Level;&#10;&#10;/**&#10; * Spigot implementation of the LoggingService.&#10; * Provides logging functionality using Bukkit's logging system.&#10; */&#10;public class SpigotLoggingService implements LoggingService&#10;{&#10;&#10;    private final Map&lt;Class&lt;?&gt;, Logger&gt; loggers = new HashMap&lt;&gt;();&#10;    private final org.bukkit.plugin.Plugin plugin;&#10;&#10;    /**&#10;     * Creates a new SpigotLoggingService instance.&#10;     *&#10;     * @param plugin The Bukkit plugin instance&#10;     */&#10;    public SpigotLoggingService(org.bukkit.plugin.Plugin plugin)&#10;    {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public Logger getLogger(Class&lt;?&gt; clazz)&#10;    {&#10;        return loggers.computeIfAbsent(clazz, c -&gt;&#10;        {&#10;            // Determine if this is a Piston Core class or user plugin class&#10;            boolean isPistonCore = c.getPackage() != null &amp;&amp; c.getPackage().getName().startsWith(&quot;org.pistonworks.core&quot;);&#10;&#10;            if (isPistonCore)&#10;            {&#10;                // For Piston Core classes, create a custom logger with &quot;Piston Core&quot; name&#10;                java.util.logging.Logger coreLogger = java.util.logging.Logger.getLogger(&quot;Piston Core&quot;);&#10;                return new SpigotLogger(coreLogger, true);&#10;            } else&#10;            {&#10;                // For user plugin classes, use the plugin's logger directly&#10;                return new SpigotLogger(plugin.getLogger(), false);&#10;            }&#10;        });&#10;    }&#10;&#10;    private static class SpigotLogger implements Logger&#10;    {&#10;        private final java.util.logging.Logger logger;&#10;        private final boolean isPistonCore;&#10;&#10;        public SpigotLogger(java.util.logging.Logger logger, boolean isPistonCore)&#10;        {&#10;            this.logger = logger;&#10;            this.isPistonCore = isPistonCore;&#10;        }&#10;&#10;        private void log(Level level, String message)&#10;        {&#10;            if (isPistonCore)&#10;            {&#10;                // For Piston Core, we need to log to the server console directly to avoid double prefixes&#10;                // Use the server's main logger instead of a custom one&#10;                java.util.logging.Logger serverLogger = java.util.logging.Logger.getLogger(&quot;Minecraft&quot;);&#10;                serverLogger.log(level, &quot;[Piston Core] &quot; + message);&#10;            } else&#10;            {&#10;                // For user plugins, let Bukkit handle the prefixing&#10;                logger.log(level, message);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public void debug(String message)&#10;        {&#10;            log(Level.FINE, message);&#10;        }&#10;&#10;        @Override&#10;        public void info(String message)&#10;        {&#10;            log(Level.INFO, message);&#10;        }&#10;&#10;        @Override&#10;        public void warn(String message)&#10;        {&#10;            log(Level.WARNING, message);&#10;        }&#10;&#10;        @Override&#10;        public void error(String message)&#10;        {&#10;            log(Level.SEVERE, message);&#10;        }&#10;&#10;        @Override&#10;        public void critical(String message)&#10;        {&#10;            log(Level.SEVERE, message);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/impl/piston-core-spigot/src/main/java/org/pistonworks/core/spigot/SpigotPlayer.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/impl/piston-core-spigot/src/main/java/org/pistonworks/core/spigot/SpigotPlayer.java" />
              <option name="originalContent" value="package org.pistonworks.core.spigot;&#10;&#10;import org.bukkit.attribute.Attributable;&#10;import org.bukkit.attribute.Attribute;&#10;import org.bukkit.attribute.AttributeInstance;&#10;import org.pistonworks.core.api.model.Position;&#10;import org.pistonworks.core.api.model.World;&#10;import org.pistonworks.core.api.model.entity.Player;&#10;&#10;import java.util.UUID;&#10;&#10;/**&#10; * Spigot implementation of the Piston Player interface.&#10; * Wraps a Bukkit Player to provide the Piston API interface.&#10; */&#10;public class SpigotPlayer implements Player&#10;{&#10;&#10;    private final org.bukkit.entity.Player bukkitPlayer;&#10;&#10;    /**&#10;     * Creates a new SpigotPlayer wrapper.&#10;     *&#10;     * @param bukkitPlayer The Bukkit Player to wrap&#10;     */&#10;    public SpigotPlayer(org.bukkit.entity.Player bukkitPlayer)&#10;    {&#10;        this.bukkitPlayer = bukkitPlayer;&#10;    }&#10;&#10;    @Override&#10;    public UUID getUniqueId()&#10;    {&#10;        return bukkitPlayer.getUniqueId();&#10;    }&#10;&#10;    @Override&#10;    public String getName()&#10;    {&#10;        return bukkitPlayer.getName();&#10;    }&#10;&#10;    @Override&#10;    public void sendMessage(String message)&#10;    {&#10;        bukkitPlayer.sendMessage(message);&#10;    }&#10;&#10;    @Override&#10;    public boolean hasPermission(String permission)&#10;    {&#10;        return bukkitPlayer.hasPermission(permission);&#10;    }&#10;&#10;    @Override&#10;    public boolean isOnline()&#10;    {&#10;        return bukkitPlayer.isOnline();&#10;    }&#10;&#10;    @Override&#10;    public void kick(String reason)&#10;    {&#10;        bukkitPlayer.kickPlayer(reason);&#10;    }&#10;&#10;    @Override&#10;    public double getWalkSpeed()&#10;    {&#10;        return bukkitPlayer.getWalkSpeed();&#10;    }&#10;&#10;    @Override&#10;    public void setWalkSpeed(double speed)&#10;    {&#10;        bukkitPlayer.setWalkSpeed((float) speed);&#10;    }&#10;&#10;    @Override&#10;    public int getExperience()&#10;    {&#10;        return bukkitPlayer.getTotalExperience();&#10;    }&#10;&#10;    @Override&#10;    public void setExperience(int experience)&#10;    {&#10;        bukkitPlayer.setTotalExperience(experience);&#10;    }&#10;&#10;    @Override&#10;    public Position getPosition()&#10;    {&#10;        org.bukkit.Location loc = bukkitPlayer.getLocation();&#10;        return new Position(null, loc.getX(), loc.getY(), loc.getZ()); // TODO: Implement world conversion&#10;    }&#10;&#10;    @Override&#10;    public void setPosition(Position position)&#10;    {&#10;        org.bukkit.Location loc = bukkitPlayer.getLocation();&#10;        loc.setX(position.x());&#10;        loc.setY(position.y());&#10;        loc.setZ(position.z());&#10;        bukkitPlayer.teleport(loc);&#10;    }&#10;&#10;    @Override&#10;    public org.pistonworks.core.api.model.Orientation getOrientation()&#10;    {&#10;        org.bukkit.Location loc = bukkitPlayer.getLocation();&#10;        return new org.pistonworks.core.api.model.Orientation(loc.getYaw(), loc.getPitch());&#10;    }&#10;&#10;    @Override&#10;    public void setOrientation(org.pistonworks.core.api.model.Orientation orientation)&#10;    {&#10;        org.bukkit.Location loc = bukkitPlayer.getLocation();&#10;        loc.setYaw((float) orientation.yaw());&#10;        loc.setPitch((float) orientation.pitch());&#10;        bukkitPlayer.teleport(loc);&#10;    }&#10;&#10;    @Override&#10;    public double getHealth()&#10;    {&#10;        return bukkitPlayer.getHealth();&#10;    }&#10;&#10;    @Override&#10;    public void setHealth(double health)&#10;    {&#10;        bukkitPlayer.setHealth(health);&#10;    }&#10;&#10;    @Override&#10;    public double getMaxHealth()&#10;    {&#10;        AttributeInstance maxHealthAttribute = ((Attributable) bukkitPlayer).getAttribute(Attribute.MAX_HEALTH);&#10;        return maxHealthAttribute.getBaseValue();&#10;    }&#10;&#10;    @Override&#10;    public void setMaxHealth(double maxHealth)&#10;    {&#10;        AttributeInstance maxHealthAttribute = ((Attributable) bukkitPlayer).getAttribute(Attribute.MAX_HEALTH);&#10;        maxHealthAttribute.setBaseValue(maxHealth);&#10;    }&#10;&#10;&#10;    /**&#10;     * Gets the underlying Bukkit player.&#10;     *&#10;     * @return the Bukkit Player instance&#10;     */&#10;    public org.bukkit.entity.Player getBukkitPlayer()&#10;    {&#10;        return bukkitPlayer;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.pistonworks.core.spigot;&#10;&#10;import org.bukkit.attribute.Attributable;&#10;import org.bukkit.attribute.Attribute;&#10;import org.bukkit.attribute.AttributeInstance;&#10;import org.pistonworks.core.api.model.Position;&#10;import org.pistonworks.core.api.model.World;&#10;import org.pistonworks.core.api.model.entity.Player;&#10;&#10;import java.util.UUID;&#10;&#10;/**&#10; * Spigot implementation of the Piston Player interface.&#10; * Wraps a Bukkit Player to provide the Piston API interface.&#10; */&#10;public class SpigotPlayer implements Player&#10;{&#10;&#10;    private final org.bukkit.entity.Player bukkitPlayer;&#10;&#10;    /**&#10;     * Creates a new SpigotPlayer wrapper.&#10;     *&#10;     * @param bukkitPlayer The Bukkit Player to wrap&#10;     */&#10;    public SpigotPlayer(org.bukkit.entity.Player bukkitPlayer)&#10;    {&#10;        this.bukkitPlayer = bukkitPlayer;&#10;    }&#10;&#10;    @Override&#10;    public UUID getUniqueId()&#10;    {&#10;        return bukkitPlayer.getUniqueId();&#10;    }&#10;&#10;    @Override&#10;    public String getName()&#10;    {&#10;        return bukkitPlayer.getName();&#10;    }&#10;&#10;    @Override&#10;    public void sendMessage(String message)&#10;    {&#10;        bukkitPlayer.sendMessage(message);&#10;    }&#10;&#10;    @Override&#10;    public boolean hasPermission(String permission)&#10;    {&#10;        return bukkitPlayer.hasPermission(permission);&#10;    }&#10;&#10;    @Override&#10;    public boolean isOnline()&#10;    {&#10;        return bukkitPlayer.isOnline();&#10;    }&#10;&#10;    @Override&#10;    public void kick(String reason)&#10;    {&#10;        bukkitPlayer.kickPlayer(reason);&#10;    }&#10;&#10;    @Override&#10;    public double getWalkSpeed()&#10;    {&#10;        return bukkitPlayer.getWalkSpeed();&#10;    }&#10;&#10;    @Override&#10;    public void setWalkSpeed(double speed)&#10;    {&#10;        bukkitPlayer.setWalkSpeed((float) speed);&#10;    }&#10;&#10;    @Override&#10;    public int getExperience()&#10;    {&#10;        return bukkitPlayer.getTotalExperience();&#10;    }&#10;&#10;    @Override&#10;    public void setExperience(int experience)&#10;    {&#10;        bukkitPlayer.setTotalExperience(experience);&#10;    }&#10;&#10;    @Override&#10;    public Position getPosition()&#10;    {&#10;        org.bukkit.Location loc = bukkitPlayer.getLocation();&#10;        return new Position(null, loc.getX(), loc.getY(), loc.getZ()); // TODO: Implement world conversion&#10;    }&#10;&#10;    @Override&#10;    public void setPosition(Position position)&#10;    {&#10;        org.bukkit.Location loc = bukkitPlayer.getLocation();&#10;        loc.setX(position.x());&#10;        loc.setY(position.y());&#10;        loc.setZ(position.z());&#10;        bukkitPlayer.teleport(loc);&#10;    }&#10;&#10;    @Override&#10;    public org.pistonworks.core.api.model.Orientation getOrientation()&#10;    {&#10;        org.bukkit.Location loc = bukkitPlayer.getLocation();&#10;        return new org.pistonworks.core.api.model.Orientation(loc.getYaw(), loc.getPitch());&#10;    }&#10;&#10;    @Override&#10;    public void setOrientation(org.pistonworks.core.api.model.Orientation orientation)&#10;    {&#10;        org.bukkit.Location loc = bukkitPlayer.getLocation();&#10;        loc.setYaw((float) orientation.yaw());&#10;        loc.setPitch((float) orientation.pitch());&#10;        bukkitPlayer.teleport(loc);&#10;    }&#10;&#10;    @Override&#10;    public double getHealth()&#10;    {&#10;        return bukkitPlayer.getHealth();&#10;    }&#10;&#10;    @Override&#10;    public void setHealth(double health)&#10;    {&#10;        bukkitPlayer.setHealth(health);&#10;    }&#10;&#10;    @Override&#10;    public double getMaxHealth()&#10;    {&#10;        AttributeInstance maxHealthAttribute = ((Attributable) bukkitPlayer).getAttribute(Attribute.MAX_HEALTH);&#10;        return maxHealthAttribute.getBaseValue();&#10;    }&#10;&#10;    @Override&#10;    public void setMaxHealth(double maxHealth)&#10;    {&#10;        AttributeInstance maxHealthAttribute = ((Attributable) bukkitPlayer).getAttribute(Attribute.MAX_HEALTH);&#10;        maxHealthAttribute.setBaseValue(maxHealth);&#10;    }&#10;&#10;    /**&#10;     * Gets the world the player is currently in.&#10;     * &#10;     * @return The world the player is in&#10;     */&#10;    public World getWorld()&#10;    {&#10;        // TODO: Implement SpigotWorld wrapper&#10;        return null;&#10;    }&#10;&#10;    /**&#10;     * Gets the underlying Bukkit player.&#10;     *&#10;     * @return the Bukkit Player instance&#10;     */&#10;    public org.bukkit.entity.Player getBukkitPlayer()&#10;    {&#10;        return bukkitPlayer;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/impl/piston-core-spigot/src/main/java/org/pistonworks/core/spigot/SpigotPlugin.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/impl/piston-core-spigot/src/main/java/org/pistonworks/core/spigot/SpigotPlugin.java" />
              <option name="originalContent" value="package org.pistonworks.core.spigot;&#10;&#10;import org.bukkit.plugin.java.JavaPlugin;&#10;import org.pistonworks.core.api.model.PluginContainer;&#10;&#10;import java.io.File;&#10;&#10;/**&#10; * Spigot implementation of the Piston PluginContainer interface.&#10; * Wraps a Bukkit JavaPlugin to provide the Piston API interface.&#10; */&#10;public class SpigotPlugin implements PluginContainer&#10;{&#10;&#10;    private final JavaPlugin bukkitPlugin;&#10;&#10;    @Override&#10;    public String getName()&#10;    {&#10;        return bukkitPlugin.getName();&#10;    }&#10;&#10;    @Override&#10;    public String getVersion()&#10;    {&#10;        return bukkitPlugin.getDescription().getVersion();&#10;    }&#10;&#10;    @Override&#10;    public String getDescription()&#10;    {&#10;        return bukkitPlugin.getDescription().getDescription();&#10;    }&#10;&#10;    @Override&#10;    public Class&lt;?&gt; getMainClass()&#10;    {&#10;        return bukkitPlugin.getClass();&#10;    }&#10;&#10;    @Override&#10;    public File getDataFolder()&#10;    {&#10;        return bukkitPlugin.getDataFolder();&#10;    }&#10;&#10;    @Override&#10;    public Object getInstance()&#10;    {&#10;        return bukkitPlugin;&#10;    }&#10;&#10;    /**&#10;     * Gets the underlying Bukkit JavaPlugin instance.&#10;     * This is used for platform-specific operations.&#10;     *&#10;     * @return the Bukkit JavaPlugin instance&#10;     */&#10;    public JavaPlugin getBukkitPlugin()&#10;    {&#10;        return bukkitPlugin;&#10;    }&#10;&#10;    /**&#10;     * Checks if this plugin is currently enabled.&#10;     *&#10;     * @return true if the plugin is enabled, false otherwise&#10;     */&#10;    public boolean isEnabled()&#10;    {&#10;        return bukkitPlugin.isEnabled();&#10;    }&#10;&#10;    /**&#10;     * Gets the authors of this plugin.&#10;     *&#10;     * @return array of author names&#10;     */&#10;    public String[] getAuthors()&#10;    {&#10;        return bukkitPlugin.getDescription().getAuthors().toArray(new String[0]);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.pistonworks.core.spigot;&#13;&#10;&#13;&#10;import org.bukkit.plugin.java.JavaPlugin;&#13;&#10;import org.pistonworks.core.api.model.PluginContainer;&#13;&#10;&#13;&#10;import java.io.File;&#13;&#10;&#13;&#10;/**&#13;&#10; * Spigot implementation of the Piston PluginContainer interface.&#13;&#10; * Wraps a Bukkit JavaPlugin to provide the Piston API interface.&#13;&#10; */&#13;&#10;public class SpigotPlugin implements PluginContainer&#13;&#10;{&#13;&#10;&#13;&#10;    private final JavaPlugin bukkitPlugin;&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Creates a new SpigotPlugin wrapper.&#13;&#10;     * &#13;&#10;     * @param bukkitPlugin The JavaPlugin to wrap&#13;&#10;     */&#13;&#10;    public SpigotPlugin(JavaPlugin bukkitPlugin)&#13;&#10;    {&#13;&#10;        this.bukkitPlugin = bukkitPlugin;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public String getName()&#13;&#10;    {&#13;&#10;        return bukkitPlugin.getName();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public String getVersion()&#13;&#10;    {&#13;&#10;        return bukkitPlugin.getDescription().getVersion();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public String getDescription()&#13;&#10;    {&#13;&#10;        return bukkitPlugin.getDescription().getDescription();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public Class&lt;?&gt; getMainClass()&#13;&#10;    {&#13;&#10;        return bukkitPlugin.getClass();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public File getDataFolder()&#13;&#10;    {&#13;&#10;        return bukkitPlugin.getDataFolder();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public Object getInstance()&#13;&#10;    {&#13;&#10;        return bukkitPlugin;&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Gets the underlying Bukkit JavaPlugin instance.&#13;&#10;     * This is used for platform-specific operations.&#13;&#10;     *&#13;&#10;     * @return the Bukkit JavaPlugin instance&#13;&#10;     */&#13;&#10;    public JavaPlugin getBukkitPlugin()&#13;&#10;    {&#13;&#10;        return bukkitPlugin;&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Checks if this plugin is currently enabled.&#13;&#10;     *&#13;&#10;     * @return true if the plugin is enabled, false otherwise&#13;&#10;     */&#13;&#10;    public boolean isEnabled()&#13;&#10;    {&#13;&#10;        return bukkitPlugin.isEnabled();&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Gets the authors of this plugin.&#13;&#10;     *&#13;&#10;     * @return array of author names&#13;&#10;     */&#13;&#10;    public String[] getAuthors()&#13;&#10;    {&#13;&#10;        return bukkitPlugin.getDescription().getAuthors().toArray(new String[0]);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/impl/piston-core-spigot/src/main/java/org/pistonworks/core/spigot/SpigotPluginMetadataService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/impl/piston-core-spigot/src/main/java/org/pistonworks/core/spigot/SpigotPluginMetadataService.java" />
              <option name="originalContent" value="package org.pistonworks.core.spigot;&#10;&#10;import org.pistonworks.core.api.service.PluginMetadataService;&#10;import org.yaml.snakeyaml.Yaml;&#10;&#10;import java.io.InputStream;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.Optional;&#10;import java.util.stream.Collectors;&#10;&#10;/**&#10; * Spigot implementation of PluginMetadataService that reads from piston-core.yml&#10; */&#10;public class SpigotPluginMetadataService implements PluginMetadataService&#10;{&#10;    private final Map&lt;String, Object&gt; metadata;&#10;    private final org.bukkit.plugin.Plugin plugin;&#10;&#10;&#10;    private Map&lt;String, Object&gt; loadMetadata()&#10;    {&#10;        try&#10;        {&#10;            InputStream pistonYmlStream = plugin.getResource(&quot;piston-core.yml&quot;);&#10;            if (pistonYmlStream == null)&#10;            {&#10;                plugin.getLogger().warning(&quot;piston-core.yml not found in plugin resources&quot;);&#10;                return new HashMap&lt;&gt;();&#10;            }&#10;&#10;            Yaml yaml = new Yaml();&#10;            Map&lt;String, Object&gt; config = yaml.load(pistonYmlStream);&#10;            return config != null ? config : new HashMap&lt;&gt;();&#10;        } catch (Exception e)&#10;        {&#10;            plugin.getLogger().severe(&quot;Failed to load piston-core.yml: &quot; + e.getMessage());&#10;            return new HashMap&lt;&gt;();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String getPluginName()&#10;    {&#10;        Object name = metadata.get(&quot;name&quot;);&#10;        return name != null ? name.toString() : &quot;Unknown&quot;;&#10;    }&#10;&#10;    @Override&#10;    public String getPluginVersion()&#10;    {&#10;        Object version = metadata.get(&quot;version&quot;);&#10;        return version != null ? version.toString() : &quot;Unknown&quot;;&#10;    }&#10;&#10;    @Override&#10;    public String getPluginDescription()&#10;    {&#10;        Object description = metadata.get(&quot;description&quot;);&#10;        return description != null ? description.toString() : &quot;No description&quot;;&#10;    }&#10;&#10;    @Override&#10;    public String getPluginMainClass()&#10;    {&#10;        Object main = metadata.get(&quot;main&quot;);&#10;        return main != null ? main.toString() : &quot;Unknown&quot;;&#10;    }&#10;&#10;    @Override&#10;    public List&lt;String&gt; getPluginAuthors()&#10;    {&#10;        Object authors = metadata.get(&quot;authors&quot;);&#10;        if (authors == null)&#10;        {&#10;            return List.of(&quot;Unknown&quot;);&#10;        }&#10;&#10;        // Handle different formats that authors might be stored in&#10;        if (authors instanceof List)&#10;        {&#10;            // If it's already a list, cast and convert to strings&#10;            @SuppressWarnings(&quot;unchecked&quot;)&#10;            List&lt;Object&gt; authorList = (List&lt;Object&gt;) authors;&#10;            return authorList.stream()&#10;                    .map(Object::toString)&#10;                    .collect(Collectors.toList());&#10;        } else if (authors instanceof String)&#10;        {&#10;            // If it's a string, split by common separators&#10;            String authorsStr = authors.toString();&#10;            if (authorsStr.contains(&quot;,&quot;))&#10;            {&#10;                return java.util.Arrays.stream(authorsStr.split(&quot;,&quot;))&#10;                        .map(String::trim)&#10;                        .collect(Collectors.toList());&#10;            } else&#10;            {&#10;                return List.of(authorsStr.trim());&#10;            }&#10;        } else&#10;        {&#10;            // Fallback for any other type&#10;            return List.of(authors.toString());&#10;        }&#10;    }&#10;&#10;    public String getPluginAuthorsString()&#10;    {&#10;        List&lt;String&gt; authors = getPluginAuthors();&#10;        return String.join(&quot;, &quot;, authors);&#10;    }&#10;&#10;    @Override&#10;    public Optional&lt;Object&gt; getProperty(String key)&#10;    {&#10;        return Optional.ofNullable(metadata.get(key));&#10;    }&#10;&#10;    @Override&#10;    @SuppressWarnings(&quot;unchecked&quot;)&#10;    public &lt;T&gt; T getProperty(String key, T defaultValue)&#10;    {&#10;        Object value = metadata.get(key);&#10;        if (value != null)&#10;        {&#10;            try&#10;            {&#10;                return (T) value;&#10;            } catch (ClassCastException e)&#10;            {&#10;                plugin.getLogger().warning(&quot;Property '&quot; + key + &quot;' cannot be cast to expected type, returning default value&quot;);&#10;            }&#10;        }&#10;        return defaultValue;&#10;    }&#10;&#10;    @Override&#10;    public Map&lt;String, Object&gt; getAllProperties()&#10;    {&#10;        return new HashMap&lt;&gt;(metadata);&#10;    }&#10;&#10;    @Override&#10;    public boolean hasProperty(String key)&#10;    {&#10;        return metadata.containsKey(key);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.pistonworks.core.spigot;&#10;&#10;import org.pistonworks.core.api.service.PluginMetadataService;&#10;import org.yaml.snakeyaml.Yaml;&#10;&#10;import java.io.InputStream;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.Optional;&#10;import java.util.stream.Collectors;&#10;&#10;/**&#10; * Spigot implementation of PluginMetadataService that reads from piston-core.yml&#10; */&#10;public class SpigotPluginMetadataService implements PluginMetadataService&#10;{&#10;    private final Map&lt;String, Object&gt; metadata;&#10;    private final org.bukkit.plugin.Plugin plugin;&#10;&#10;    /**&#10;     * Creates a new SpigotPluginMetadataService instance.&#10;     * &#10;     * @param plugin The Bukkit plugin instance&#10;     */&#10;    public SpigotPluginMetadataService(org.bukkit.plugin.Plugin plugin)&#10;    {&#10;        this.plugin = plugin;&#10;        this.metadata = loadMetadata();&#10;    }&#10;&#10;    private Map&lt;String, Object&gt; loadMetadata()&#10;    {&#10;        try&#10;        {&#10;            InputStream pistonYmlStream = plugin.getResource(&quot;piston-core.yml&quot;);&#10;            if (pistonYmlStream == null)&#10;            {&#10;                plugin.getLogger().warning(&quot;piston-core.yml not found in plugin resources&quot;);&#10;                return new HashMap&lt;&gt;();&#10;            }&#10;&#10;            Yaml yaml = new Yaml();&#10;            Map&lt;String, Object&gt; config = yaml.load(pistonYmlStream);&#10;            return config != null ? config : new HashMap&lt;&gt;();&#10;        } catch (Exception e)&#10;        {&#10;            plugin.getLogger().severe(&quot;Failed to load piston-core.yml: &quot; + e.getMessage());&#10;            return new HashMap&lt;&gt;();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String getPluginName()&#10;    {&#10;        Object name = metadata.get(&quot;name&quot;);&#10;        return name != null ? name.toString() : &quot;Unknown&quot;;&#10;    }&#10;&#10;    @Override&#10;    public String getPluginVersion()&#10;    {&#10;        Object version = metadata.get(&quot;version&quot;);&#10;        return version != null ? version.toString() : &quot;Unknown&quot;;&#10;    }&#10;&#10;    @Override&#10;    public String getPluginDescription()&#10;    {&#10;        Object description = metadata.get(&quot;description&quot;);&#10;        return description != null ? description.toString() : &quot;No description&quot;;&#10;    }&#10;&#10;    @Override&#10;    public String getPluginMainClass()&#10;    {&#10;        Object main = metadata.get(&quot;main&quot;);&#10;        return main != null ? main.toString() : &quot;Unknown&quot;;&#10;    }&#10;&#10;    @Override&#10;    public List&lt;String&gt; getPluginAuthors()&#10;    {&#10;        Object authors = metadata.get(&quot;authors&quot;);&#10;        if (authors == null)&#10;        {&#10;            return List.of(&quot;Unknown&quot;);&#10;        }&#10;&#10;        // Handle different formats that authors might be stored in&#10;        if (authors instanceof List)&#10;        {&#10;            // If it's already a list, cast and convert to strings&#10;            @SuppressWarnings(&quot;unchecked&quot;)&#10;            List&lt;Object&gt; authorList = (List&lt;Object&gt;) authors;&#10;            return authorList.stream()&#10;                    .map(Object::toString)&#10;                    .collect(Collectors.toList());&#10;        } else if (authors instanceof String)&#10;        {&#10;            // If it's a string, split by common separators&#10;            String authorsStr = authors.toString();&#10;            if (authorsStr.contains(&quot;,&quot;))&#10;            {&#10;                return java.util.Arrays.stream(authorsStr.split(&quot;,&quot;))&#10;                        .map(String::trim)&#10;                        .collect(Collectors.toList());&#10;            } else&#10;            {&#10;                return List.of(authorsStr.trim());&#10;            }&#10;        } else&#10;        {&#10;            // Fallback for any other type&#10;            return List.of(authors.toString());&#10;        }&#10;    }&#10;&#10;    public String getPluginAuthorsString()&#10;    {&#10;        List&lt;String&gt; authors = getPluginAuthors();&#10;        return String.join(&quot;, &quot;, authors);&#10;    }&#10;&#10;    @Override&#10;    public Optional&lt;Object&gt; getProperty(String key)&#10;    {&#10;        return Optional.ofNullable(metadata.get(key));&#10;    }&#10;&#10;    @Override&#10;    @SuppressWarnings(&quot;unchecked&quot;)&#10;    public &lt;T&gt; T getProperty(String key, T defaultValue)&#10;    {&#10;        Object value = metadata.get(key);&#10;        if (value != null)&#10;        {&#10;            try&#10;            {&#10;                return (T) value;&#10;            } catch (ClassCastException e)&#10;            {&#10;                plugin.getLogger().warning(&quot;Property '&quot; + key + &quot;' cannot be cast to expected type, returning default value&quot;);&#10;            }&#10;        }&#10;        return defaultValue;&#10;    }&#10;&#10;    @Override&#10;    public Map&lt;String, Object&gt; getAllProperties()&#10;    {&#10;        return new HashMap&lt;&gt;(metadata);&#10;    }&#10;&#10;    @Override&#10;    public boolean hasProperty(String key)&#10;    {&#10;        return metadata.containsKey(key);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/impl/piston-core-spigot/src/main/java/org/pistonworks/core/spigot/SpigotWorld.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/impl/piston-core-spigot/src/main/java/org/pistonworks/core/spigot/SpigotWorld.java" />
              <option name="originalContent" value="package org.pistonworks.core.spigot;&#10;&#10;import org.pistonworks.core.api.model.World;&#10;import org.pistonworks.core.api.model.entity.Player;&#10;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;/**&#10; * Spigot implementation of the Piston World interface.&#10; * Wraps a Bukkit World to provide the Piston API interface.&#10; */&#10;public class SpigotWorld implements World&#10;{&#10;&#10;    private final org.bukkit.World bukkitWorld;&#10;&#10;    @Override&#10;    public String getUniqueId()&#10;    {&#10;        return bukkitWorld.getUID().toString();&#10;    }&#10;&#10;    @Override&#10;    public String getName()&#10;    {&#10;        return bukkitWorld.getName();&#10;    }&#10;&#10;    @Override&#10;    public long getTime()&#10;    {&#10;        return bukkitWorld.getTime();&#10;    }&#10;&#10;    @Override&#10;    public void setTime(long time)&#10;    {&#10;        bukkitWorld.setTime(time);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Player&gt; getPlayers()&#10;    {&#10;        return bukkitWorld.getPlayers().stream()&#10;                .map(SpigotPlayer::new)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * Gets the underlying Bukkit world.&#10;     *&#10;     * @return the Bukkit world instance&#10;     */&#10;    public org.bukkit.World getBukkitWorld()&#10;    {&#10;        return bukkitWorld;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.pistonworks.core.spigot;&#13;&#10;&#13;&#10;import org.pistonworks.core.api.model.World;&#13;&#10;import org.pistonworks.core.api.model.entity.Player;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;import java.util.stream.Collectors;&#13;&#10;&#13;&#10;/**&#13;&#10; * Spigot implementation of the Piston World interface.&#13;&#10; * Wraps a Bukkit World to provide the Piston API interface.&#13;&#10; */&#13;&#10;public class SpigotWorld implements World&#13;&#10;{&#13;&#10;&#13;&#10;    private final org.bukkit.World bukkitWorld;&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Creates a new SpigotWorld wrapper.&#13;&#10;     * &#13;&#10;     * @param bukkitWorld The Bukkit World to wrap&#13;&#10;     */&#13;&#10;    public SpigotWorld(org.bukkit.World bukkitWorld)&#13;&#10;    {&#13;&#10;        this.bukkitWorld = bukkitWorld;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public String getUniqueId()&#13;&#10;    {&#13;&#10;        return bukkitWorld.getUID().toString();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public String getName()&#13;&#10;    {&#13;&#10;        return bukkitWorld.getName();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public long getTime()&#13;&#10;    {&#13;&#10;        return bukkitWorld.getTime();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void setTime(long time)&#13;&#10;    {&#13;&#10;        bukkitWorld.setTime(time);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public List&lt;Player&gt; getPlayers()&#13;&#10;    {&#13;&#10;        return bukkitWorld.getPlayers().stream()&#13;&#10;                .map(SpigotPlayer::new)&#13;&#10;                .collect(Collectors.toList());&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Gets the underlying Bukkit world.&#13;&#10;     *&#13;&#10;     * @return the Bukkit world instance&#13;&#10;     */&#13;&#10;    public org.bukkit.World getBukkitWorld()&#13;&#10;    {&#13;&#10;        return bukkitWorld;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>